{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAOA,OAAO,EAAC,eAAe,EAAC,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAC,4BAA4B,EAAC,MAAM,sCAAsC,CAAC;AA8ElF;;GAEG;AACH,MAAM,UAAU,qBAAqB,CACnC,UAAkC,EAAE;IAKpC,OAAO;QACL,EAAE,EAAE,sBAAsB;QAE1B,oBAAoB,EAAE;YACpB,eAAe,EAAE;gBACf,WAAW,EAAE,QAAQ;aACtB;SACF;QAED,MAAM,EAAE,GAAG,CAAC,EAAE;YACZ,MAAM,OAAO,GAAG,4BAA4B,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAClE,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;YAEtE,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC,cAAc,EAAE,eAAe,EAAC,CAAC;aACnD,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import {\n  FeatureServiceBinder,\n  FeatureServiceProviderDefinition,\n  FeatureServices,\n  SharedFeatureService\n} from '@feature-hub/core';\nimport {Logger} from '@feature-hub/logger';\nimport {AsyncSsrManager} from './internal/async-ssr-manager';\nimport {createAsyncSsrManagerContext} from './internal/async-ssr-manager-context';\n\nexport interface AsyncSsrManagerOptions {\n  /**\n   * Render timeout in milliseconds.\n   */\n  readonly timeout?: number;\n}\n\n/**\n * The Async SSR Manager enables the integrator to render a given composition\n * of React Feature Apps in multiple render passes until all Feature Apps and\n * Feature Services have finished their asynchronous operations.\n *\n * The integrator should provide the Async SSR Manager only on the server.\n *\n * Feature Apps and Feature Services should declare the Async SSR Manager as an\n * optional dependency. Its presence can be used to determine whether they are\n * currently rendered on the server or on the client.\n */\nexport interface AsyncSsrManagerV1 {\n  /**\n   * This method is intended for the integrator. It calls the given render\n   * function at least once. With [[scheduleRerender]] further render passes\n   * can be triggered. It resolves with the result of the last render call.\n   *\n   * @throws Throws an error when the configured timeout is reached\n   * (see [[AsyncSsrManagerConfig.timeout]]).\n   *\n   * @param render A render function that is called for each render pass.\n   */\n  renderUntilCompleted(render: () => string): Promise<string>;\n\n  /**\n   * This method is intended for consumers, i.e. Feature Apps and Feature\n   * Services. It schedules a rerender with an optional promise representing an\n   * asynchronous operation. The method must be called synchronously during a\n   * render pass, or while already scheduled asynchronous operations are\n   * running.\n   *\n   * If no asynchronous operation is running, the method must be called\n   * synchronously during a render pass. This means that the following will\n   * **not** work:\n   *\n   * ```js\n   * const data = await fetch('example.com').then(res => res.json());\n   * // the rerender scheduled in the next line is not taken into account\n   * asyncSsrManager.scheduleRerender();\n   * ```\n   *\n   * Instead, the rerender should be scheduled before awaiting the asynchronous\n   * operation:\n   *\n   * ```js\n   * const dataPromise = fetch('example.com').then(res => res.json());\n   * asyncSsrManager.scheduleRerender(dataPromise);\n   * const data = await dataPromise;\n   * ```\n   *\n   * Calling it while already scheduled asynchronous operations are running,\n   * does not lead to multiple render passes, but instead the already scheduled\n   * rerender is deferred until every registered asynchronous operation has\n   * finished.\n   *\n   * @param asyncOperation A promise representing an asynchronous operation that\n   * shall defer the scheduled rerender at least until after its completion.\n   */\n  scheduleRerender(asyncOperation?: Promise<unknown>): void;\n}\n\nexport interface SharedAsyncSsrManager extends SharedFeatureService {\n  readonly '1.0.0': FeatureServiceBinder<AsyncSsrManagerV1>;\n}\n\nexport interface AsyncSsrManagerDependencies extends FeatureServices {\n  readonly 's2:logger'?: Logger;\n}\n\n/**\n * @see [[AsyncSsrManagerV1]] for further information.\n */\nexport function defineAsyncSsrManager(\n  options: AsyncSsrManagerOptions = {}\n): FeatureServiceProviderDefinition<\n  SharedAsyncSsrManager,\n  AsyncSsrManagerDependencies\n> {\n  return {\n    id: 's2:async-ssr-manager',\n\n    optionalDependencies: {\n      featureServices: {\n        's2:logger': '^1.0.0'\n      }\n    },\n\n    create: env => {\n      const context = createAsyncSsrManagerContext(env.featureServices);\n      const asyncSsrManager = new AsyncSsrManager(context, options.timeout);\n\n      return {\n        '1.0.0': () => ({featureService: asyncSsrManager})\n      };\n    }\n  };\n}\n"]}