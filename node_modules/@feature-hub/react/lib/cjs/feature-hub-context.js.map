{"version":3,"file":"feature-hub-context.js","sourceRoot":"","sources":["../../src/feature-hub-context.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,6CAA+B;AAwD/B,MAAM,kCAAkC,GAAG,EAAE,CAAC;AAE9C,MAAM,oCAAoC,GACxC,mRAAmR,CAAC;AAEtR,MAAM,iBAAiB,GAAG,KAAK,CAAC,aAAa,CAC3C,kCAAoE,CACrE,CAAC;AAEF;;;;;GAKG;AACU,QAAA,yBAAyB,GAAG,iBAAiB,CAAC,QAAQ,CAAC;AAEpE;;;;;GAKG;AACU,QAAA,yBAAyB,GAAG,CACvC,KAA0D,EAC1D,EAAE,CAAC,CACH,oBAAC,iBAAiB,CAAC,QAAQ,QACxB,sBAAsB,CAAC,EAAE;IACxB,IAAI,sBAAsB,KAAK,kCAAkC,EAAE;QACjE,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;KACvD;IAED,2CAA2C;IAC3C,MAAM,EAAC,MAAM,GAAG,OAAO,KAAa,sBAAsB,EAAjC,iDAAiC,CAAC;IAE3D,OAAO,KAAK,CAAC,QAAQ,iBAAE,MAAM,IAAK,IAAI,EAAE,CAAC;AAC3C,CAAC,CAC0B,CAC9B,CAAC;AAEF,iCAAyB,CAAC,WAAW,GAAG,2BAA2B,CAAC","sourcesContent":["import {AsyncSsrManagerV1} from '@feature-hub/async-ssr-manager';\nimport {FeatureAppManager, Logger} from '@feature-hub/core';\nimport * as React from 'react';\n\ntype SomeRequired<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>> &\n  Required<Pick<T, K>>;\n\nexport interface Css {\n  readonly href: string;\n  readonly media?: string;\n}\n\nexport interface FeatureHubContextProviderValue {\n  /**\n   * The `FeatureAppManager` singleton instance.\n   */\n  readonly featureAppManager: FeatureAppManager;\n\n  /**\n   * A custom logger that shall be used instead of `console`.\n   */\n  readonly logger?: Logger;\n\n  /**\n   * The Async SSR Manager Feature Service that is bound to the integrator. It\n   * is only provided on the server.\n   */\n  readonly asyncSsrManager?: AsyncSsrManagerV1;\n\n  /**\n   * A callback that the integrator provides on the server, mainly for the\n   * [[FeatureAppLoader]], to add client URLs of those Feature Apps that\n   * are rendered on the server, so that they can be preloaded on the client\n   * before hydration. Calling it more than once with the same URL must not have\n   * any impact.\n   *\n   * @param url The client URL of a Feature App that is rendered on the server.\n   */\n  addUrlForHydration?(url: string): void;\n\n  /**\n   * A callback that the integrator provides on the server, mainly for the\n   * [[FeatureAppLoader]], to add stylesheets for those Feature Apps that are\n   * rendered on the server, so that they can be added to the document before\n   * being sent to the client. Calling it more than once with the same `href`\n   * must not have any impact.\n   *\n   * @param stylesheets A list of stylesheets for a Feature App that is rendered\n   * on the server.\n   */\n  addStylesheetsForSsr?(stylesheets: Css[]): void;\n}\n\nexport type FeatureHubContextConsumerValue = SomeRequired<\n  FeatureHubContextProviderValue,\n  'logger'\n>;\n\nconst dummyDefaultFeatureHubContextValue = {};\n\nconst noFeatureHubContextValueErrorMessage =\n  'No Feature Hub context was provided! There are two possible causes: 1.) No FeatureHubContextProvider was rendered in the React tree. 2.) A Feature App that renders itself a FeatureAppLoader or a FeatureAppContainer did not declare @feature-hub/react as an external package.';\n\nconst FeatureHubContext = React.createContext(\n  dummyDefaultFeatureHubContextValue as FeatureHubContextProviderValue\n);\n\n/**\n * The integrator must render a `FeatureHubContextProvider` to provide the\n * `FeatureAppManager` singleton instance, as well as the Async SSR Manager\n * Feature Service (optionally), to Feature Hub context consumers, e.g. the\n * [[FeatureAppLoader]] or [[FeatureAppContainer]].\n */\nexport const FeatureHubContextProvider = FeatureHubContext.Provider;\n\n/**\n * A `FeatureHubContextConsumer` can be used to retrieve the `FeatureAppManager`\n * singleton instance, as well as the Async SSR Manager Feature Service (if it\n * is provided by the integrator). Its main purpose is to be used inside the\n * [[FeatureAppLoader]] and [[FeatureAppContainer]].\n */\nexport const FeatureHubContextConsumer = (\n  props: React.ConsumerProps<FeatureHubContextConsumerValue>\n) => (\n  <FeatureHubContext.Consumer>\n    {featureHubContextValue => {\n      if (featureHubContextValue === dummyDefaultFeatureHubContextValue) {\n        throw new Error(noFeatureHubContextValueErrorMessage);\n      }\n\n      // Provide `console` as the default logger.\n      const {logger = console, ...rest} = featureHubContextValue;\n\n      return props.children({logger, ...rest});\n    }}\n  </FeatureHubContext.Consumer>\n);\n\nFeatureHubContextConsumer.displayName = 'FeatureHubContextConsumer';\n"]}