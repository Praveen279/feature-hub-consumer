"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const dummyDefaultFeatureHubContextValue = {};
const noFeatureHubContextValueErrorMessage = 'No Feature Hub context was provided! There are two possible causes: 1.) No FeatureHubContextProvider was rendered in the React tree. 2.) A Feature App that renders itself a FeatureAppLoader or a FeatureAppContainer did not declare @feature-hub/react as an external package.';
const FeatureHubContext = React.createContext(dummyDefaultFeatureHubContextValue);
/**
 * The integrator must render a `FeatureHubContextProvider` to provide the
 * `FeatureAppManager` singleton instance, as well as the Async SSR Manager
 * Feature Service (optionally), to Feature Hub context consumers, e.g. the
 * [[FeatureAppLoader]] or [[FeatureAppContainer]].
 */
exports.FeatureHubContextProvider = FeatureHubContext.Provider;
/**
 * A `FeatureHubContextConsumer` can be used to retrieve the `FeatureAppManager`
 * singleton instance, as well as the Async SSR Manager Feature Service (if it
 * is provided by the integrator). Its main purpose is to be used inside the
 * [[FeatureAppLoader]] and [[FeatureAppContainer]].
 */
exports.FeatureHubContextConsumer = (props) => (React.createElement(FeatureHubContext.Consumer, null, featureHubContextValue => {
    if (featureHubContextValue === dummyDefaultFeatureHubContextValue) {
        throw new Error(noFeatureHubContextValueErrorMessage);
    }
    // Provide `console` as the default logger.
    const { logger = console } = featureHubContextValue, rest = __rest(featureHubContextValue, ["logger"]);
    return props.children(Object.assign({ logger }, rest));
}));
exports.FeatureHubContextConsumer.displayName = 'FeatureHubContextConsumer';
//# sourceMappingURL=feature-hub-context.js.map