import { FeatureAppEnvironment, FeatureServices } from '@feature-hub/core';
import * as React from 'react';
import { Css } from './feature-hub-context';
export interface FeatureAppLoaderProps<TConfig = unknown> {
    /**
     * The Feature App ID is used to identify the Feature App instance. Multiple
     * Feature App Loaders with the same `featureAppId` will render the same
     * Feature app instance. The ID is also used as a consumer ID for dependent
     * Feature Services. To render multiple instances of the same kind of Feature
     * App, different IDs must be used.
     */
    readonly featureAppId: string;
    /**
     * The absolute or relative base URL of the Feature App's assets and/or BFF.
     */
    readonly baseUrl?: string;
    /**
     * The URL of the Feature App's client module bundle. If [[baseUrl]] is
     * specified, it will be prepended, unless `src` is an absolute URL.
     */
    readonly src: string;
    /**
     * The URL of the Feature App's server module bundle. If [[baseUrl]] is
     * specified, it will be prepended, unless `serverSrc` is an absolute URL.
     * Either [[baseUrl]] or `serverSrc` must be an absolute URL.
     */
    readonly serverSrc?: string;
    /**
     * A list of stylesheets to be added to the document. If [[baseUrl]] is
     * specified, it will be prepended, unless [[Css.href]] is an absolute URL.
     */
    readonly css?: Css[];
    /**
     * A config object that is passed to the Feature App's `create` method.
     */
    readonly config?: TConfig;
    /**
     * A callback that is called before the Feature App is created.
     */
    readonly beforeCreate?: (env: FeatureAppEnvironment<FeatureServices, TConfig>) => void;
    readonly onError?: (error: Error) => void;
    readonly renderError?: (error: Error) => React.ReactNode;
}
/**
 * The `FeatureAppLoader` component allows the integrator to load Feature Apps
 * from a remote location. It can also be used by a Feature App to render
 * another Feature App as a child.
 *
 * When a Feature App throws an error while rendering or, in the case of a
 * [[ReactFeatureApp]], throws an error in a lifecycle method, the
 * `FeatureAppLoader` renders `null`. On the server, however, rendering
 * errors are not caught and must therefore be handled by the integrator.
 */
export declare function FeatureAppLoader<TConfig>(props: FeatureAppLoaderProps<TConfig>): JSX.Element;
