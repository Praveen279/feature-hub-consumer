import { FeatureAppDefinition, FeatureAppEnvironment, FeatureServices } from '@feature-hub/core';
import * as React from 'react';
/**
 * The recommended way of writing a Feature App for a React integrator.
 */
export interface ReactFeatureApp {
    /**
     * A React Feature App must define a `render` method that returns a React
     * element. Since this element is directly rendered by React, the standard
     * React lifecyle methods can be used (if `render` returns an instance of a
     * React `ComponentClass`).
     */
    render(): React.ReactNode;
}
/**
 * A DOM Feature App allows the use of other frontend technologies such as
 * Vue.js or Angular, although it is placed on a web page using React.
 */
export interface DomFeatureApp {
    /**
     * @param container The container element to which the Feature App can attach
     * itself.
     */
    attachTo(container: Element): void;
}
/**
 * A Feature App that can be rendered by the [[FeatureAppLoader]] or
 * [[FeatureAppContainer]] must be either a [[ReactFeatureApp]]
 * (recommended) or a [[DomFeatureApp]].
 */
export declare type FeatureApp = ReactFeatureApp | DomFeatureApp;
export interface FeatureAppContainerProps<TFeatureApp, TFeatureServices extends FeatureServices = FeatureServices, TConfig = unknown> {
    /**
     * The Feature App ID is used to identify the Feature App instance. Multiple
     * Feature App Loaders with the same `featureAppId` will render the same
     * Feature app instance. The ID is also used as a consumer ID for dependent
     * Feature Services. To render multiple instances of the same kind of Feature
     * App, different IDs must be used.
     */
    readonly featureAppId: string;
    /**
     * The absolute or relative base URL of the Feature App's assets and/or BFF.
     */
    readonly baseUrl?: string;
    /**
     * The consumer definition of the Feature App.
     */
    readonly featureAppDefinition: FeatureAppDefinition<TFeatureApp, TFeatureServices, TConfig>;
    /**
     * A config object that is passed to the Feature App's `create` method.
     */
    readonly config?: TConfig;
    /**
     * A callback that is called before the Feature App is created.
     */
    readonly beforeCreate?: (env: FeatureAppEnvironment<TFeatureServices, TConfig>) => void;
    readonly onError?: (error: Error) => void;
    readonly renderError?: (error: Error) => React.ReactNode;
}
/**
 * The `FeatureAppContainer` component allows the integrator to bundle Feature
 * Apps instead of loading them from a remote location. It can also be used by
 * a Feature App to render another Feature App as a child.
 *
 * When a Feature App throws an error while rendering or, in the case of a
 * [[ReactFeatureApp]], throws an error in a lifecycle method, the
 * `FeatureAppContainer` renders `null`. On the server, however, rendering
 * errors are not caught and must therefore be handled by the integrator.
 */
export declare function FeatureAppContainer<TFeatureApp extends FeatureApp, TFeatureServices extends FeatureServices = FeatureServices, TConfig = unknown>(props: FeatureAppContainerProps<TFeatureApp, TFeatureServices, TConfig>): JSX.Element;
