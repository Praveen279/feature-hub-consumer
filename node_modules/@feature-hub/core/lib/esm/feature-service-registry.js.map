{"version":3,"file":"feature-service-registry.js","sourceRoot":"","sources":["../../src/feature-service-registry.ts"],"names":[],"mappings":"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","sourcesContent":["import {satisfies, valid} from 'semver';\nimport {ExternalsValidator, RequiredExternals} from './externals-validator';\nimport * as Messages from './internal/feature-service-registry-messages';\nimport {\n  Dependencies,\n  DependencyGraph,\n  toposortDependencies\n} from './internal/toposort-dependencies';\nimport {Logger} from './logger';\n\n/**\n * A map of Feature Services with their ID as key and a semver-compatible\n * version string as value.\n */\nexport interface FeatureServiceConsumerDependencies {\n  readonly [providerId: string]: string | undefined;\n}\n\nexport interface FeatureServiceConsumerDefinition {\n  readonly dependencies?: {\n    /**\n     * A map of required Feature Services with their ID as key and a\n     * semver-compatible version string as value.\n     */\n    readonly featureServices?: FeatureServiceConsumerDependencies;\n    readonly externals?: RequiredExternals;\n  };\n  readonly optionalDependencies?: {\n    /**\n     * A map of optional Feature Services with their ID as key and a\n     * semver-compatible version string as value.\n     */\n    readonly featureServices?: FeatureServiceConsumerDependencies;\n  };\n}\n\nexport interface FeatureServices {\n  [providerId: string]: unknown | undefined;\n}\n\nexport interface FeatureServiceEnvironment<\n  TFeatureServices extends FeatureServices\n> {\n  /**\n   * An object of required Feature Services that are semver-compatible with the\n   * declared dependencies in the Feature App definition.\n   */\n  readonly featureServices: TFeatureServices;\n}\n\nexport interface FeatureServiceProviderDefinition<\n  TSharedFeatureService extends SharedFeatureService,\n  TFeatureServices extends FeatureServices = FeatureServices\n> extends FeatureServiceConsumerDefinition {\n  readonly id: string;\n\n  create(\n    env: FeatureServiceEnvironment<TFeatureServices>\n  ): TSharedFeatureService;\n}\n\nexport interface FeatureServiceBinding<TFeatureService> {\n  readonly featureService: TFeatureService;\n\n  unbind?(): void;\n}\n\nexport type FeatureServiceBinder<TFeatureService> = (\n  consumerId: string\n) => FeatureServiceBinding<TFeatureService>;\n\nexport interface SharedFeatureService {\n  readonly [version: string]: FeatureServiceBinder<unknown> | undefined;\n}\n\nexport interface FeatureServicesBinding<\n  TFeatureServices extends FeatureServices = FeatureServices\n> {\n  readonly featureServices: TFeatureServices;\n\n  unbind(): void;\n}\n\nexport interface FeatureServiceRegistryOptions {\n  /**\n   * If the [[FeatureAppManager]] is configured with a\n   * [[FeatureAppManagerOptions.moduleLoader]], to load Feature Apps from a\n   * remote location that also provide their own Feature Services, i.e. the\n   * Feature Services are included in a different bundle than the integrator\n   * bundle, it might make sense to validate external dependencies that are\n   * required by those Feature Services against the shared dependencies that are\n   * provided by the integrator. This makes it possible that an error is already\n   * thrown when registering a Feature Service with incompatible external\n   * dependencies, and thus enables early feedback as to whether a Feature\n   * Service is compatible with the integration environment.\n   */\n  readonly externalsValidator?: ExternalsValidator;\n\n  /**\n   * A custom logger that shall be used instead of `console`.\n   */\n  readonly logger?: Logger;\n}\n\ntype ProviderId = string;\n\ntype ProviderDefinitionsById = Map<\n  ProviderId,\n  FeatureServiceProviderDefinition<SharedFeatureService>\n>;\n\nfunction mergeFeatureServiceDependencies({\n  dependencies,\n  optionalDependencies\n}: FeatureServiceConsumerDefinition): Dependencies {\n  return {\n    ...(dependencies && dependencies.featureServices),\n    ...(optionalDependencies && optionalDependencies.featureServices)\n  };\n}\n\nfunction createDependencyGraph(\n  definitions: FeatureServiceProviderDefinition<SharedFeatureService>[]\n): DependencyGraph {\n  const dependencyGraph: DependencyGraph = new Map();\n\n  for (const definition of definitions) {\n    dependencyGraph.set(\n      definition.id,\n      mergeFeatureServiceDependencies(definition)\n    );\n  }\n\n  return dependencyGraph;\n}\n\nfunction isOptionalFeatureServiceDependency(\n  {optionalDependencies}: FeatureServiceConsumerDefinition,\n  providerId: ProviderId\n): boolean {\n  return Boolean(\n    optionalDependencies &&\n      optionalDependencies.featureServices &&\n      optionalDependencies.featureServices.hasOwnProperty(providerId)\n  );\n}\n\nfunction createProviderDefinitionsById(\n  definitions: FeatureServiceProviderDefinition<SharedFeatureService>[]\n): ProviderDefinitionsById {\n  const providerDefinitionsById: ProviderDefinitionsById = new Map();\n\n  for (const definition of definitions) {\n    providerDefinitionsById.set(definition.id, definition);\n  }\n\n  return providerDefinitionsById;\n}\n\n/**\n * The FeatureServiceRegistry provides Feature Services to dependent consumers.\n * The integrator should instantiate a singleton instance of the registry.\n */\nexport class FeatureServiceRegistry {\n  private readonly sharedFeatureServices = new Map<\n    ProviderId,\n    SharedFeatureService\n  >();\n\n  private readonly consumerIds = new Set<string>();\n\n  private readonly logger: Logger;\n\n  public constructor(\n    private readonly options: FeatureServiceRegistryOptions = {}\n  ) {\n    this.logger = options.logger || console;\n  }\n\n  /**\n   * Register a set of Feature Services to make them available for binding to\n   * dependent consumers.\n   *\n   * @throws Throws an error if the dependencies of one of the provider\n   * definitions can't be fulfilled.\n   * @throws Throws an error if one of the registered Feature Services contains\n   * an invalid version according to semver notation.\n   *\n   * @param providerDefinitions Feature Services that should be registered. A\n   * Feature Service and its dependencies must either be registered together, or\n   * the dependencies must have already been registered. It is not possible to\n   * provide dependencies later. Sorting the provided definitions is not\n   * necessary, since the registry takes care of registering the given\n   * definitions in the correct order.\n   * @param registrantId The ID of the entity that registers the provider\n   * definitions.\n   */\n  public registerFeatureServices(\n    providerDefinitions: FeatureServiceProviderDefinition<\n      SharedFeatureService\n    >[],\n    registrantId: string\n  ): void {\n    const providerDefinitionsById = createProviderDefinitionsById(\n      providerDefinitions\n    );\n\n    const dependencyGraph = createDependencyGraph(providerDefinitions);\n\n    for (const providerId of toposortDependencies(dependencyGraph)) {\n      this.registerFeatureService(\n        providerDefinitionsById,\n        providerId,\n        registrantId\n      );\n    }\n  }\n\n  /**\n   * Bind all dependencies to a consumer.\n   *\n   * @throws Throws an error if non-optional dependencies can't be fulfilled.\n   * @throws Throws an error if called with the same consumer ID more than once.\n   *\n   * @param consumerDefinition The definition of the consumer to which\n   * dependencies should be bound.\n   * @param consumerId The ID of the consumer to which dependencies should be\n   * bound.\n   */\n  public bindFeatureServices(\n    consumerDefinition: FeatureServiceConsumerDefinition,\n    consumerId: string\n  ): FeatureServicesBinding {\n    if (this.consumerIds.has(consumerId)) {\n      throw new Error(Messages.featureServicesAlreadyBound(consumerId));\n    }\n\n    const bindings = new Map<string, FeatureServiceBinding<unknown>>();\n    const featureServices: FeatureServices = Object.create(null);\n    const allDependencies = mergeFeatureServiceDependencies(consumerDefinition);\n\n    for (const providerId of Object.keys(allDependencies)) {\n      const optional = isOptionalFeatureServiceDependency(\n        consumerDefinition,\n        providerId\n      );\n\n      const versionRange = allDependencies[providerId];\n\n      const binding = this.bindFeatureService(\n        providerId,\n        consumerId,\n        versionRange,\n        {optional}\n      );\n\n      if (!binding) {\n        continue;\n      }\n\n      this.logger.info(\n        Messages.featureServiceSuccessfullyBound(providerId, consumerId)\n      );\n\n      bindings.set(providerId, binding);\n\n      featureServices[providerId] = binding.featureService;\n    }\n\n    this.consumerIds.add(consumerId);\n\n    let unbound = false;\n\n    const unbind = () => {\n      if (unbound) {\n        throw new Error(Messages.featureServicesAlreadyUnbound(consumerId));\n      }\n\n      unbound = true;\n\n      this.consumerIds.delete(consumerId);\n\n      for (const [providerId, binding] of bindings.entries()) {\n        try {\n          if (binding.unbind) {\n            binding.unbind();\n          }\n\n          this.logger.info(\n            Messages.featureServiceSuccessfullyUnbound(providerId, consumerId)\n          );\n        } catch (error) {\n          this.logger.error(\n            Messages.featureServiceCouldNotBeUnbound(providerId, consumerId),\n            error\n          );\n        }\n      }\n    };\n\n    return {featureServices, unbind};\n  }\n\n  private registerFeatureService(\n    providerDefinitionsById: ProviderDefinitionsById,\n    providerId: string,\n    registrantId: string\n  ): void {\n    const providerDefinition = providerDefinitionsById.get(providerId);\n\n    if (this.sharedFeatureServices.has(providerId)) {\n      this.logger.warn(\n        Messages.featureServiceAlreadyRegistered(providerId, registrantId)\n      );\n    } else if (providerDefinition) {\n      this.validateExternals(providerDefinition);\n\n      const {featureServices} = this.bindFeatureServices(\n        providerDefinition,\n        providerId\n      );\n\n      const sharedFeatureService = providerDefinition.create({featureServices});\n\n      this.validateFeatureServiceVersions(\n        sharedFeatureService,\n        providerId,\n        registrantId\n      );\n\n      this.sharedFeatureServices.set(providerId, sharedFeatureService);\n\n      this.logger.info(\n        Messages.featureServiceSuccessfullyRegistered(providerId, registrantId)\n      );\n    }\n  }\n\n  private bindFeatureService(\n    providerId: string,\n    consumerId: string,\n    versionRange: string | undefined,\n    {optional}: {optional: boolean}\n  ): FeatureServiceBinding<unknown> | undefined {\n    if (!versionRange) {\n      const message = Messages.featureServiceDependencyVersionInvalid(\n        optional,\n        providerId,\n        consumerId\n      );\n\n      if (optional) {\n        this.logger.info(message);\n\n        return;\n      }\n\n      throw new Error(message);\n    }\n\n    const sharedFeatureService = this.sharedFeatureServices.get(providerId);\n\n    if (!sharedFeatureService) {\n      const message = Messages.featureServiceNotRegistered(\n        optional,\n        providerId,\n        consumerId\n      );\n\n      if (optional) {\n        this.logger.info(message);\n\n        return;\n      }\n\n      throw new Error(message);\n    }\n\n    const supportedVersions = Object.keys(sharedFeatureService);\n\n    const version = supportedVersions.find(supportedVersion =>\n      satisfies(supportedVersion, versionRange)\n    );\n\n    const bindFeatureService = version && sharedFeatureService[version];\n\n    if (!bindFeatureService) {\n      const message = Messages.featureServiceUnsupported(\n        optional,\n        providerId,\n        consumerId,\n        versionRange,\n        supportedVersions\n      );\n\n      if (optional) {\n        this.logger.info(message);\n\n        return;\n      }\n\n      throw new Error(message);\n    }\n\n    return bindFeatureService(consumerId);\n  }\n\n  private validateExternals(\n    featureAppDefinition: FeatureServiceConsumerDefinition\n  ): void {\n    const {externalsValidator} = this.options;\n\n    if (!externalsValidator) {\n      return;\n    }\n\n    const {dependencies} = featureAppDefinition;\n\n    if (dependencies && dependencies.externals) {\n      externalsValidator.validate(dependencies.externals);\n    }\n  }\n\n  private validateFeatureServiceVersions(\n    sharedFeatureService: SharedFeatureService,\n    providerId: string,\n    registrantId: string\n  ): void {\n    for (const version of Object.keys(sharedFeatureService)) {\n      if (!valid(version)) {\n        throw new Error(\n          Messages.featureServiceVersionInvalid(\n            providerId,\n            registrantId,\n            version\n          )\n        );\n      }\n    }\n  }\n}\n"]}