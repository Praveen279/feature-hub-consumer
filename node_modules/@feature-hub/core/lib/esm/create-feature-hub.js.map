{"version":3,"file":"create-feature-hub.js","sourceRoot":"","sources":["../../src/create-feature-hub.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,kBAAkB,EAAoB,MAAM,uBAAuB,CAAC;AAC5E,OAAO,EAAC,iBAAiB,EAAe,MAAM,uBAAuB,CAAC;AACtE,OAAO,EAIL,sBAAsB,EAGvB,MAAM,4BAA4B,CAAC;AAyDpC;;;;;;;;GAQG;AACH,MAAM,UAAU,gBAAgB,CAC9B,YAAoB,EACpB,UAA6B,EAAE;IAE/B,MAAM,EACJ,yBAAyB,EACzB,0BAA0B,EAC1B,iBAAiB,EACjB,YAAY,EACZ,MAAM,EACP,GAAG,OAAO,CAAC;IAEZ,IAAI,kBAAkD,CAAC;IAEvD,IAAI,iBAAiB,EAAE;QACrB,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;KAChE;IAED,MAAM,sBAAsB,GAAG,IAAI,sBAAsB,CAAC;QACxD,kBAAkB;QAClB,MAAM;KACP,CAAC,CAAC;IAEH,MAAM,oBAAoB,GAAqC;QAC7D,YAAY,EAAE,EAAC,eAAe,EAAE,0BAA0B,EAAC;KAC5D,CAAC;IAEF,IAAI,yBAAyB,EAAE;QAC7B,sBAAsB,CAAC,uBAAuB,CAC5C,yBAAyB,EACzB,YAAY,CACb,CAAC;KACH;IAED,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,sBAAsB,EAAE;QACtE,kBAAkB;QAClB,YAAY;QACZ,MAAM;KACP,CAAC,CAAC;IAEH,MAAM,EAAC,eAAe,EAAC,GAAG,sBAAsB,CAAC,mBAAmB,CAClE,oBAAoB,EACpB,YAAY,CACb,CAAC;IAEF,OAAO,EAAC,iBAAiB,EAAE,sBAAsB,EAAE,eAAe,EAAC,CAAC;AACtE,CAAC","sourcesContent":["import {ExternalsValidator, ProvidedExternals} from './externals-validator';\nimport {FeatureAppManager, ModuleLoader} from './feature-app-manager';\nimport {\n  FeatureServiceConsumerDefinition,\n  FeatureServiceConsumerDependencies,\n  FeatureServiceProviderDefinition,\n  FeatureServiceRegistry,\n  FeatureServices,\n  SharedFeatureService\n} from './feature-service-registry';\nimport {Logger} from './logger';\n\nexport interface FeatureHub {\n  /**\n   * The [[FeatureAppManager]] singleton instance.\n   */\n  readonly featureAppManager: FeatureAppManager;\n\n  /**\n   * The [[FeatureServiceRegistry]] singleton instance.\n   */\n  readonly featureServiceRegistry: FeatureServiceRegistry;\n\n  /**\n   * The Feature Services that are bound to the integrator based on the\n   * [[FeatureHubOptions.featureServiceDependencies]].\n   */\n  readonly featureServices: FeatureServices;\n}\n\nexport interface FeatureHubOptions {\n  /**\n   * Provided Feature Services. Sorting the provided definitions is not\n   * necessary, since the registry takes care of registering the given\n   * definitions in the correct order.\n   */\n  readonly featureServiceDefinitions?: FeatureServiceProviderDefinition<\n    SharedFeatureService\n  >[];\n\n  /**\n   * A map of Feature Services the integrator depends on, with the Feature\n   * Service ID as key and a semver-compatible version string as value.\n   */\n  readonly featureServiceDependencies?: FeatureServiceConsumerDependencies;\n\n  /**\n   * A map of provided externals, with their names as keys and strict semver\n   * versions as values.\n   */\n  readonly providedExternals?: ProvidedExternals;\n\n  /**\n   * For the [[FeatureAppManager]] to be able to load Feature Apps from a\n   * remote location, a module loader must be provided, (e.g. the\n   * `@feature-hub/module-loader-amd` package or the\n   * `@feature-hub/module-loader-commonjs` package).\n   */\n  readonly moduleLoader?: ModuleLoader;\n\n  /**\n   * A custom logger that shall be used instead of `console`.\n   */\n  readonly logger?: Logger;\n}\n\n/**\n * Creates the [[FeatureServiceRegistry]] singleton instance, registers all\n * [[FeatureHubOptions.featureServiceDefinitions]] for the given integrator\n * ID, and instantiates a [[FeatureAppManager]] singleton instance using\n * the [[FeatureServiceRegistry]].\n *\n * @param integratorId A self-selected but unique consumer ID that is used to\n * register or consume Feature Services.\n */\nexport function createFeatureHub(\n  integratorId: string,\n  options: FeatureHubOptions = {}\n): FeatureHub {\n  const {\n    featureServiceDefinitions,\n    featureServiceDependencies,\n    providedExternals,\n    moduleLoader,\n    logger\n  } = options;\n\n  let externalsValidator: ExternalsValidator | undefined;\n\n  if (providedExternals) {\n    externalsValidator = new ExternalsValidator(providedExternals);\n  }\n\n  const featureServiceRegistry = new FeatureServiceRegistry({\n    externalsValidator,\n    logger\n  });\n\n  const integratorDefinition: FeatureServiceConsumerDefinition = {\n    dependencies: {featureServices: featureServiceDependencies}\n  };\n\n  if (featureServiceDefinitions) {\n    featureServiceRegistry.registerFeatureServices(\n      featureServiceDefinitions,\n      integratorId\n    );\n  }\n\n  const featureAppManager = new FeatureAppManager(featureServiceRegistry, {\n    externalsValidator,\n    moduleLoader,\n    logger\n  });\n\n  const {featureServices} = featureServiceRegistry.bindFeatureServices(\n    integratorDefinition,\n    integratorId\n  );\n\n  return {featureAppManager, featureServiceRegistry, featureServices};\n}\n"]}