/**
 * An `AsyncValue` provides a promise and as soon as the promise resolves or
 * rejects, also exposes the returned value or error. It is useful for
 * accessing a promise value in a synchronous context.
 */
export declare class AsyncValue<TValue> {
    readonly promise: Promise<TValue>;
    value?: TValue | undefined;
    error?: Error | undefined;
    constructor(promise: Promise<TValue>, value?: TValue | undefined, error?: Error | undefined);
}
