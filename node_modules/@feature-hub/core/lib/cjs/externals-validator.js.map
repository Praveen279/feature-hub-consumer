{"version":3,"file":"externals-validator.js","sourceRoot":"","sources":["../../src/externals-validator.ts"],"names":[],"mappings":";;AAAA,mCAAwC;AAiBxC;;;GAGG;AACH,MAAa,kBAAkB;IAC7B;;;OAGG;IACH,YAAoC,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACtE,KAAK,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,IAAI,MAAM,CAAC,OAAO,CAC1D,iBAAiB,CAClB,EAAE;YACD,IAAI,CAAC,cAAK,CAAC,eAAe,CAAC,EAAE;gBAC3B,MAAM,IAAI,KAAK,CACb,wBAAwB,IAAI,CAAC,SAAS,CACpC,eAAe,CAChB,qBAAqB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,cAAc,CACjE,CAAC;aACH;SACF;IACH,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,iBAAoC;QAClD,KAAK,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,IAAI,MAAM,CAAC,OAAO,CACvD,iBAAiB,CAClB,EAAE;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAE7D,IAAI,CAAC,eAAe,EAAE;gBACpB,MAAM,IAAI,KAAK,CACb,2BAA2B,IAAI,CAAC,SAAS,CACvC,YAAY,CACb,mBAAmB,CACrB,CAAC;aACH;YAED,IAAI,CAAC,kBAAS,CAAC,eAAe,EAAE,YAAY,CAAC,EAAE;gBAC7C,MAAM,IAAI,KAAK,CACb,2BAA2B,IAAI,CAAC,SAAS,CACvC,YAAY,CACb,kCAAkC,IAAI,CAAC,SAAS,CAC/C,YAAY,CACb,8CAA8C,IAAI,CAAC,SAAS,CAC3D,eAAe,CAChB,GAAG,CACL,CAAC;aACH;SACF;IACH,CAAC;CACF;AAnDD,gDAmDC","sourcesContent":["import {satisfies, valid} from 'semver';\n\n/**\n * A map of provided external names as keys and strict semver versions as\n * values.\n */\nexport interface ProvidedExternals {\n  readonly [externalName: string]: string;\n}\n\n/**\n * A map of required external names as keys and semver version ranges as values.\n */\nexport interface RequiredExternals {\n  readonly [externalName: string]: string;\n}\n\n/**\n * The `ExternalsValidator` validates required externals against the provided\n * set of externals it is initilized with.\n */\nexport class ExternalsValidator {\n  /**\n   * @throws Throws an error if the provided externals contain an invalid\n   * version.\n   */\n  public constructor(private readonly providedExternals: ProvidedExternals) {\n    for (const [externalName, providedVersion] of Object.entries(\n      providedExternals\n    )) {\n      if (!valid(providedVersion)) {\n        throw new Error(\n          `The provided version ${JSON.stringify(\n            providedVersion\n          )} for the external ${JSON.stringify(externalName)} is invalid.`\n        );\n      }\n    }\n  }\n\n  /**\n   * Validate that the required externals are provided in a compatible version.\n   *\n   * @throws Throws an error if the required externals can't be satisfied.\n   */\n  public validate(requiredExternals: RequiredExternals): void {\n    for (const [externalName, versionRange] of Object.entries(\n      requiredExternals\n    )) {\n      const providedVersion = this.providedExternals[externalName];\n\n      if (!providedVersion) {\n        throw new Error(\n          `The external dependency ${JSON.stringify(\n            externalName\n          )} is not provided.`\n        );\n      }\n\n      if (!satisfies(providedVersion, versionRange)) {\n        throw new Error(\n          `The external dependency ${JSON.stringify(\n            externalName\n          )} in the required version range ${JSON.stringify(\n            versionRange\n          )} is not satisfied. The provided version is ${JSON.stringify(\n            providedVersion\n          )}.`\n        );\n      }\n    }\n  }\n}\n"]}